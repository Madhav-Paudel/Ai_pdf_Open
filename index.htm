<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Reader with AI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5;
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        .sidebar {
            width: 300px;
            background: #2c3e50;
            color: white;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #34495e;
        }

        .sidebar-header {
            padding: 20px;
            background: #34495e;
            border-bottom: 1px solid #4a5568;
        }

        .sidebar-header h2 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .ai-panel {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .ai-section {
            margin-bottom: 20px;
        }

        .ai-section h3 {
            font-size: 14px;
            margin-bottom: 10px;
            color: #bdc3c7;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .ai-button {
            width: 100%;
            padding: 12px;
            margin-bottom: 10px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }

        .ai-button:hover {
            background: #2980b9;
        }

        .ai-button:disabled {
            background: #7f8c8d;
            cursor: not-allowed;
        }

        .question-input {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #4a5568;
            border-radius: 4px;
            background: #34495e;
            color: white;
            font-size: 14px;
        }

        .question-input::placeholder {
            color: #bdc3c7;
        }

        .ai-response {
            background: #34495e;
            padding: 15px;
            border-radius: 6px;
            margin-top: 10px;
            font-size: 13px;
            line-height: 1.5;
            max-height: 200px;
            overflow-y: auto;
        }

        .ai-response h4 {
            color: #3498db;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .toolbar {
            height: 50px;
            background: #ecf0f1;
            border-bottom: 1px solid #bdc3c7;
            display: flex;
            align-items: center;
            padding: 0 20px;
            gap: 10px;
        }

        .toolbar button {
            padding: 8px 16px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .toolbar button:hover {
            background: #2980b9;
        }

        .toolbar .zoom-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-left: auto;
        }

        .zoom-level {
            font-size: 14px;
            color: #2c3e50;
            min-width: 60px;
            text-align: center;
        }

        .pdf-container {
            flex: 1;
            overflow: auto;
            padding: 20px;
            background: #ecf0f1;
        }

        .pdf-viewer {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        .pdf-page {
            display: block;
            margin: 0 auto;
            border-bottom: 1px solid #e1e8ed;
        }

        .no-pdf {
            text-align: center;
            color: #7f8c8d;
            font-size: 18px;
            margin-top: 100px;
        }

        .loading {
            text-align: center;
            color: #3498db;
            font-size: 16px;
            margin-top: 50px;
        }

        .selection-highlight {
            background: rgba(52, 152, 219, 0.3);
            border-radius: 2px;
        }

        .status-bar {
            height: 30px;
            background: #34495e;
            color: white;
            display: flex;
            align-items: center;
            padding: 0 20px;
            font-size: 12px;
        }

        .page-info {
            margin-left: auto;
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #bdc3c7;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #95a5a6;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>AI Assistant</h2>
            <p>Analyze and interact with your PDF</p>
        </div>
        
        <div class="ai-panel">
            <div class="ai-section">
                <h3>Quick Actions</h3>
                <button class="ai-button" id="summarizeSelection" disabled>
                    Summarize Selection
                </button>
                <button class="ai-button" id="summarizeDocument" disabled>
                    Summarize Document
                </button>
            </div>

            <div class="ai-section">
                <h3>Ask AI</h3>
                <textarea class="question-input" id="questionInput" 
                    placeholder="Ask a question about the document..." 
                    rows="3" disabled></textarea>
                <button class="ai-button" id="askQuestion" disabled>
                    Ask Question
                </button>
            </div>

            <div class="ai-section" id="responseSection" style="display: none;">
                <h3>AI Response</h3>
                <div class="ai-response" id="aiResponse"></div>
            </div>
        </div>
    </div>

    <div class="main-content">
        <div class="toolbar">
            <button id="openFile">Open PDF</button>
            <button id="prevPage" disabled>Previous</button>
            <button id="nextPage" disabled>Next</button>
            
            <div class="zoom-controls">
                <button id="zoomOut">-</button>
                <span class="zoom-level" id="zoomLevel">100%</span>
                <button id="zoomIn">+</button>
            </div>
        </div>

        <div class="pdf-container" id="pdfContainer">
            <div class="no-pdf">
                <p>No PDF loaded</p>
                <p style="font-size: 14px; margin-top: 10px;">Use File â†’ Open PDF or click the Open PDF button</p>
            </div>
        </div>

        <div class="status-bar">
            <span id="statusText">Ready</span>
            <span class="page-info" id="pageInfo"></span>
        </div>
    </div>

    <script>
        class PDFReader {
            constructor() {
                this.pdfDoc = null;
                this.currentPage = 1;
                this.totalPages = 0;
                this.scale = 1.0;
                this.pdfText = '';
                this.selectedText = '';
                
                this.initializeElements();
                this.setupEventListeners();
                this.setupPDFJS();
            }

            initializeElements() {
                this.elements = {
                    container: document.getElementById('pdfContainer'),
                    openFile: document.getElementById('openFile'),
                    prevPage: document.getElementById('prevPage'),
                    nextPage: document.getElementById('nextPage'),
                    zoomIn: document.getElementById('zoomIn'),
                    zoomOut: document.getElementById('zoomOut'),
                    zoomLevel: document.getElementById('zoomLevel'),
                    statusText: document.getElementById('statusText'),
                    pageInfo: document.getElementById('pageInfo'),
                    summarizeSelection: document.getElementById('summarizeSelection'),
                    summarizeDocument: document.getElementById('summarizeDocument'),
                    questionInput: document.getElementById('questionInput'),
                    askQuestion: document.getElementById('askQuestion'),
                    responseSection: document.getElementById('responseSection'),
                    aiResponse: document.getElementById('aiResponse')
                };
            }

            setupEventListeners() {
                // File operations
                this.elements.openFile.addEventListener('click', () => this.openFile());
                
                // Navigation
                this.elements.prevPage.addEventListener('click', () => this.previousPage());
                this.elements.nextPage.addEventListener('click', () => this.nextPage());
                
                // Zoom
                this.elements.zoomIn.addEventListener('click', () => this.zoomIn());
                this.elements.zoomOut.addEventListener('click', () => this.zoomOut());
                
                // AI features
                this.elements.summarizeSelection.addEventListener('click', () => this.summarizeSelection());
                this.elements.summarizeDocument.addEventListener('click', () => this.summarizeDocument());
                this.elements.askQuestion.addEventListener('click', () => this.askQuestion());
                
                // Text selection
                document.addEventListener('mouseup', () => this.handleTextSelection());
                
                // IPC listeners (for Electron)
                if (typeof require !== 'undefined') {
                    const { ipcRenderer } = require('electron');
                    
                    ipcRenderer.on('open-pdf', (event, filePath) => {
                        this.loadPDF(filePath);
                    });
                    
                    ipcRenderer.on('ai-summarize-selection', () => {
                        this.summarizeSelection();
                    });
                    
                    ipcRenderer.on('ai-summarize-document', () => {
                        this.summarizeDocument();
                    });
                    
                    ipcRenderer.on('ai-ask-question', () => {
                        this.elements.questionInput.focus();
                    });
                }
            }

            setupPDFJS() {
                if (typeof pdfjsLib !== 'undefined') {
                    pdfjsLib.GlobalWorkerOptions.workerSrc = 
                        'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
                }
            }

            async openFile() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.pdf';
                input.onchange = (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.loadPDFFromFile(file);
                    }
                };
                input.click();
            }

            async loadPDFFromFile(file) {
                try {
                    this.setStatus('Loading PDF...');
                    const arrayBuffer = await file.arrayBuffer();
                    await this.loadPDFFromBuffer(arrayBuffer);
                } catch (error) {
                    console.error('Error loading PDF:', error);
                    this.setStatus('Error loading PDF');
                }
            }

            async loadPDF(filePath) {
                if (typeof require !== 'undefined') {
                    const { ipcRenderer } = require('electron');
                    try {
                        this.setStatus('Loading PDF...');
                        const buffer = await ipcRenderer.invoke('read-pdf-file', filePath);
                        await this.loadPDFFromBuffer(buffer);
                    } catch (error) {
                        console.error('Error loading PDF:', error);
                        this.setStatus('Error loading PDF');
                    }
                }
            }

            async loadPDFFromBuffer(buffer) {
                try {
                    this.pdfDoc = await pdfjsLib.getDocument(buffer).promise;
                    this.totalPages = this.pdfDoc.numPages;
                    this.currentPage = 1;
                    
                    await this.renderAllPages();
                    await this.extractAllText();
                    
                    this.enableControls();
                    this.updatePageInfo();
                    this.setStatus('PDF loaded successfully');
                } catch (error) {
                    console.error('Error processing PDF:', error);
                    this.setStatus('Error processing PDF');
                }
            }

            async renderAllPages() {
                this.elements.container.innerHTML = '<div class="pdf-viewer" id="pdfViewer"></div>';
                const viewer = document.getElementById('pdfViewer');
                
                for (let pageNum = 1; pageNum <= this.totalPages; pageNum++) {
                    const page = await this.pdfDoc.getPage(pageNum);
                    const viewport = page.getViewport({ scale: this.scale });
                    
                    const canvas = document.createElement('canvas');
                    canvas.className = 'pdf-page';
                    canvas.width = viewport.width;
                    canvas.height = viewport.height;
                    
                    const context = canvas.getContext('2d');
                    await page.render({ canvasContext: context, viewport: viewport }).promise;
                    
                    viewer.appendChild(canvas);
                }
            }

            async extractAllText() {
                let fullText = '';
                for (let pageNum = 1; pageNum <= this.totalPages; pageNum++) {
                    const page = await this.pdfDoc.getPage(pageNum);
                    const textContent = await page.getTextContent();
                    const pageText = textContent.items.map(item => item.str).join(' ');
                    fullText += pageText + '\n';
                }
                this.pdfText = fullText;
            }

            enableControls() {
                this.elements.prevPage.disabled = false;
                this.elements.nextPage.disabled = false;
                this.elements.summarizeDocument.disabled = false;
                this.elements.questionInput.disabled = false;
                this.elements.askQuestion.disabled = false;
            }

            handleTextSelection() {
                const selection = window.getSelection();
                this.selectedText = selection.toString().trim();
                
                if (this.selectedText) {
                    this.elements.summarizeSelection.disabled = false;
                    this.setStatus(`Selected ${this.selectedText.length} characters`);
                } else {
                    this.elements.summarizeSelection.disabled = true;
                }
            }

            async summarizeSelection() {
                if (!this.selectedText) {
                    alert('Please select some text first');
                    return;
                }

                try {
                    this.setStatus('Summarizing selection...');
                    const response = await this.callAI('summarize-selection', this.selectedText);
                    this.displayAIResponse('Selection Summary', response.summary);
                    this.setStatus('Selection summarized');
                } catch (error) {
                    console.error('Error summarizing selection:', error);
                    this.setStatus('Error summarizing selection');
                }
            }

            async summarizeDocument() {
                if (!this.pdfText) {
                    alert('No document loaded');
                    return;
                }

                try {
                    this.setStatus('Summarizing document...');
                    const response = await this.callAI('summarize-document', this.pdfText);
                    this.displayAIResponse('Document Summary', response.summary);
                    this.setStatus('Document summarized');
                } catch (error) {
                    console.error('Error summarizing document:', error);
                    this.setStatus('Error summarizing document');
                }
            }

            async askQuestion() {
                const question = this.elements.questionInput.value.trim();
                if (!question) {
                    alert('Please enter a question');
                    return;
                }

                if (!this.pdfText) {
                    alert('No document loaded');
                    return;
                }

                try {
                    this.setStatus('Processing question...');
                    const response = await this.callAI('ask-question', this.pdfText, question);
                    this.displayAIResponse('AI Answer', response.answer, question);
                    this.setStatus('Question answered');
                    this.elements.questionInput.value = '';
                } catch (error) {
                    console.error('Error processing question:', error);
                    this.setStatus('Error processing question');
                }
            }

            async callAI(type, content, question = null) {
                if (typeof require !== 'undefined') {
                    const { ipcRenderer } = require('electron');
                    return await ipcRenderer.invoke('ai-process', { type, content, question });
                } else {
                    // Fallback for web version
                    return this.mockAIResponse(type, content, question);
                }
            }

            mockAIResponse(type, content, question) {
                const words = content.split(' ').length;
                
                switch (type) {
                    case 'summarize-selection':
                        return {
                            summary: `This selected text (${words} words) discusses key concepts and provides important information on the topic. The main points include relevant details that contribute to the overall understanding of the subject matter.`
                        };
                    case 'summarize-document':
                        return {
                            summary: `This document contains ${words} words and covers various topics. It presents detailed information across multiple sections, providing comprehensive coverage of the subject matter with supporting details and explanations.`
                        };
                    case 'ask-question':
                        return {
                            answer: `Based on the document content, regarding "${question}": The document contains relevant information that addresses your query. This response analyzes the available text and provides insights based on the content found in the PDF.`
                        };
                    default:
                        throw new Error('Unknown AI request type');
                }
            }

            displayAIResponse(title, content, question = null) {
                let html = `<h4>${title}</h4>`;
                if (question) {
                    html += `<p><strong>Question:</strong> ${question}</p>`;
                }
                html += `<p>${content}</p>`;
                
                this.elements.aiResponse.innerHTML = html;
                this.elements.responseSection.style.display = 'block';
            }

            previousPage() {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    this.updatePageInfo();
                }
            }

            nextPage() {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    this.updatePageInfo();
                }
            }

            zoomIn() {
                this.scale = Math.min(this.scale + 0.1, 3.0);
                this.updateZoom();
                this.renderAllPages();
            }

            zoomOut() {
                this.scale = Math.max(this.scale - 0.1, 0.3);
                this.updateZoom();
                this.renderAllPages();
            }

            updateZoom() {
                this.elements.zoomLevel.textContent = Math.round(this.scale * 100) + '%';
            }

            updatePageInfo() {
                if (this.totalPages > 0) {
                    this.elements.pageInfo.textContent = `Page ${this.currentPage} of ${this.totalPages}`;
                } else {
                    this.elements.pageInfo.textContent = '';
                }
            }

            setStatus(message) {
                this.elements.statusText.textContent = message;
            }
        }

        // Initialize the PDF reader
        document.addEventListener('DOMContentLoaded', () => {
            new PDFReader();
        });
    </script>
</body>
</html>